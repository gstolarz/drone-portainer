/*
 * Portainer API
 *
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8 You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example: ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available: * Public access * Authenticated access * Restricted access * Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8). 
 *
 * API version: 1.24.1
 * Contact: info@portainer.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portainer

import (
	"encoding/json"
)

// Stack struct for Stack
type Stack struct {
	// Stack identifier
	Id *int32 `json:"Id,omitempty"`
	// Stack name
	Name *string `json:"Name,omitempty"`
	// Stack type. 1 for a Swarm stack, 2 for a Compose stack
	Type *int32 `json:"Type,omitempty"`
	// Endpoint identifier. Reference the endpoint that will be used for deployment 
	EndpointID *int32 `json:"EndpointID,omitempty"`
	// Path to the Stack file
	EntryPoint *string `json:"EntryPoint,omitempty"`
	// Cluster identifier of the Swarm cluster where the stack is deployed
	SwarmID *string `json:"SwarmID,omitempty"`
	// Path on disk to the repository hosting the Stack file
	ProjectPath *string `json:"ProjectPath,omitempty"`
	// A list of environment variables used during stack deployment
	Env *[]StackEnv `json:"Env,omitempty"`
}

// NewStack instantiates a new Stack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStack() *Stack {
	this := Stack{}
	return &this
}

// NewStackWithDefaults instantiates a new Stack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackWithDefaults() *Stack {
	this := Stack{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Stack) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stack) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Stack) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Stack) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Stack) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stack) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Stack) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Stack) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Stack) GetType() int32 {
	if o == nil || o.Type == nil {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stack) GetTypeOk() (*int32, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Stack) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *Stack) SetType(v int32) {
	o.Type = &v
}

// GetEndpointID returns the EndpointID field value if set, zero value otherwise.
func (o *Stack) GetEndpointID() int32 {
	if o == nil || o.EndpointID == nil {
		var ret int32
		return ret
	}
	return *o.EndpointID
}

// GetEndpointIDOk returns a tuple with the EndpointID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stack) GetEndpointIDOk() (*int32, bool) {
	if o == nil || o.EndpointID == nil {
		return nil, false
	}
	return o.EndpointID, true
}

// HasEndpointID returns a boolean if a field has been set.
func (o *Stack) HasEndpointID() bool {
	if o != nil && o.EndpointID != nil {
		return true
	}

	return false
}

// SetEndpointID gets a reference to the given int32 and assigns it to the EndpointID field.
func (o *Stack) SetEndpointID(v int32) {
	o.EndpointID = &v
}

// GetEntryPoint returns the EntryPoint field value if set, zero value otherwise.
func (o *Stack) GetEntryPoint() string {
	if o == nil || o.EntryPoint == nil {
		var ret string
		return ret
	}
	return *o.EntryPoint
}

// GetEntryPointOk returns a tuple with the EntryPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stack) GetEntryPointOk() (*string, bool) {
	if o == nil || o.EntryPoint == nil {
		return nil, false
	}
	return o.EntryPoint, true
}

// HasEntryPoint returns a boolean if a field has been set.
func (o *Stack) HasEntryPoint() bool {
	if o != nil && o.EntryPoint != nil {
		return true
	}

	return false
}

// SetEntryPoint gets a reference to the given string and assigns it to the EntryPoint field.
func (o *Stack) SetEntryPoint(v string) {
	o.EntryPoint = &v
}

// GetSwarmID returns the SwarmID field value if set, zero value otherwise.
func (o *Stack) GetSwarmID() string {
	if o == nil || o.SwarmID == nil {
		var ret string
		return ret
	}
	return *o.SwarmID
}

// GetSwarmIDOk returns a tuple with the SwarmID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stack) GetSwarmIDOk() (*string, bool) {
	if o == nil || o.SwarmID == nil {
		return nil, false
	}
	return o.SwarmID, true
}

// HasSwarmID returns a boolean if a field has been set.
func (o *Stack) HasSwarmID() bool {
	if o != nil && o.SwarmID != nil {
		return true
	}

	return false
}

// SetSwarmID gets a reference to the given string and assigns it to the SwarmID field.
func (o *Stack) SetSwarmID(v string) {
	o.SwarmID = &v
}

// GetProjectPath returns the ProjectPath field value if set, zero value otherwise.
func (o *Stack) GetProjectPath() string {
	if o == nil || o.ProjectPath == nil {
		var ret string
		return ret
	}
	return *o.ProjectPath
}

// GetProjectPathOk returns a tuple with the ProjectPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stack) GetProjectPathOk() (*string, bool) {
	if o == nil || o.ProjectPath == nil {
		return nil, false
	}
	return o.ProjectPath, true
}

// HasProjectPath returns a boolean if a field has been set.
func (o *Stack) HasProjectPath() bool {
	if o != nil && o.ProjectPath != nil {
		return true
	}

	return false
}

// SetProjectPath gets a reference to the given string and assigns it to the ProjectPath field.
func (o *Stack) SetProjectPath(v string) {
	o.ProjectPath = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *Stack) GetEnv() []StackEnv {
	if o == nil || o.Env == nil {
		var ret []StackEnv
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stack) GetEnvOk() (*[]StackEnv, bool) {
	if o == nil || o.Env == nil {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *Stack) HasEnv() bool {
	if o != nil && o.Env != nil {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []StackEnv and assigns it to the Env field.
func (o *Stack) SetEnv(v []StackEnv) {
	o.Env = &v
}

func (o Stack) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["Id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.EndpointID != nil {
		toSerialize["EndpointID"] = o.EndpointID
	}
	if o.EntryPoint != nil {
		toSerialize["EntryPoint"] = o.EntryPoint
	}
	if o.SwarmID != nil {
		toSerialize["SwarmID"] = o.SwarmID
	}
	if o.ProjectPath != nil {
		toSerialize["ProjectPath"] = o.ProjectPath
	}
	if o.Env != nil {
		toSerialize["Env"] = o.Env
	}
	return json.Marshal(toSerialize)
}

type NullableStack struct {
	value *Stack
	isSet bool
}

func (v NullableStack) Get() *Stack {
	return v.value
}

func (v *NullableStack) Set(val *Stack) {
	v.value = val
	v.isSet = true
}

func (v NullableStack) IsSet() bool {
	return v.isSet
}

func (v *NullableStack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStack(val *Stack) *NullableStack {
	return &NullableStack{value: val, isSet: true}
}

func (v NullableStack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


