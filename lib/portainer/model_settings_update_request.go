/*
 * Portainer API
 *
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8 You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example: ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available: * Public access * Authenticated access * Restricted access * Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8). 
 *
 * API version: 1.24.1
 * Contact: info@portainer.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portainer

import (
	"encoding/json"
)

// SettingsUpdateRequest struct for SettingsUpdateRequest
type SettingsUpdateRequest struct {
	// URL to the templates that will be displayed in the UI when navigating to App Templates
	TemplatesURL string `json:"TemplatesURL"`
	// URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string
	LogoURL *string `json:"LogoURL,omitempty"`
	// A list of label name & value that will be used to hide containers when querying containers
	BlackListedLabels *[]SettingsBlackListedLabels `json:"BlackListedLabels,omitempty"`
	// Whether to display or not external templates contributions as sub-menus in the UI.
	DisplayExternalContributors *bool `json:"DisplayExternalContributors,omitempty"`
	// Active authentication method for the Portainer instance. Valid values are: 1 for managed or 2 for LDAP.
	AuthenticationMethod int32 `json:"AuthenticationMethod"`
	LDAPSettings *LDAPSettings `json:"LDAPSettings,omitempty"`
	// Whether non-administrator users should be able to use bind mounts when creating containers
	AllowBindMountsForRegularUsers *bool `json:"AllowBindMountsForRegularUsers,omitempty"`
	// Whether non-administrator users should be able to use privileged mode when creating containers
	AllowPrivilegedModeForRegularUsers *bool `json:"AllowPrivilegedModeForRegularUsers,omitempty"`
	// Polling interval for Edge agent (in seconds)
	EdgeAgentCheckinInterval *int32 `json:"EdgeAgentCheckinInterval,omitempty"`
}

// NewSettingsUpdateRequest instantiates a new SettingsUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsUpdateRequest(templatesURL string, authenticationMethod int32) *SettingsUpdateRequest {
	this := SettingsUpdateRequest{}
	this.TemplatesURL = templatesURL
	this.AuthenticationMethod = authenticationMethod
	return &this
}

// NewSettingsUpdateRequestWithDefaults instantiates a new SettingsUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsUpdateRequestWithDefaults() *SettingsUpdateRequest {
	this := SettingsUpdateRequest{}
	return &this
}

// GetTemplatesURL returns the TemplatesURL field value
func (o *SettingsUpdateRequest) GetTemplatesURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TemplatesURL
}

// GetTemplatesURLOk returns a tuple with the TemplatesURL field value
// and a boolean to check if the value has been set.
func (o *SettingsUpdateRequest) GetTemplatesURLOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TemplatesURL, true
}

// SetTemplatesURL sets field value
func (o *SettingsUpdateRequest) SetTemplatesURL(v string) {
	o.TemplatesURL = v
}

// GetLogoURL returns the LogoURL field value if set, zero value otherwise.
func (o *SettingsUpdateRequest) GetLogoURL() string {
	if o == nil || o.LogoURL == nil {
		var ret string
		return ret
	}
	return *o.LogoURL
}

// GetLogoURLOk returns a tuple with the LogoURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateRequest) GetLogoURLOk() (*string, bool) {
	if o == nil || o.LogoURL == nil {
		return nil, false
	}
	return o.LogoURL, true
}

// HasLogoURL returns a boolean if a field has been set.
func (o *SettingsUpdateRequest) HasLogoURL() bool {
	if o != nil && o.LogoURL != nil {
		return true
	}

	return false
}

// SetLogoURL gets a reference to the given string and assigns it to the LogoURL field.
func (o *SettingsUpdateRequest) SetLogoURL(v string) {
	o.LogoURL = &v
}

// GetBlackListedLabels returns the BlackListedLabels field value if set, zero value otherwise.
func (o *SettingsUpdateRequest) GetBlackListedLabels() []SettingsBlackListedLabels {
	if o == nil || o.BlackListedLabels == nil {
		var ret []SettingsBlackListedLabels
		return ret
	}
	return *o.BlackListedLabels
}

// GetBlackListedLabelsOk returns a tuple with the BlackListedLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateRequest) GetBlackListedLabelsOk() (*[]SettingsBlackListedLabels, bool) {
	if o == nil || o.BlackListedLabels == nil {
		return nil, false
	}
	return o.BlackListedLabels, true
}

// HasBlackListedLabels returns a boolean if a field has been set.
func (o *SettingsUpdateRequest) HasBlackListedLabels() bool {
	if o != nil && o.BlackListedLabels != nil {
		return true
	}

	return false
}

// SetBlackListedLabels gets a reference to the given []SettingsBlackListedLabels and assigns it to the BlackListedLabels field.
func (o *SettingsUpdateRequest) SetBlackListedLabels(v []SettingsBlackListedLabels) {
	o.BlackListedLabels = &v
}

// GetDisplayExternalContributors returns the DisplayExternalContributors field value if set, zero value otherwise.
func (o *SettingsUpdateRequest) GetDisplayExternalContributors() bool {
	if o == nil || o.DisplayExternalContributors == nil {
		var ret bool
		return ret
	}
	return *o.DisplayExternalContributors
}

// GetDisplayExternalContributorsOk returns a tuple with the DisplayExternalContributors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateRequest) GetDisplayExternalContributorsOk() (*bool, bool) {
	if o == nil || o.DisplayExternalContributors == nil {
		return nil, false
	}
	return o.DisplayExternalContributors, true
}

// HasDisplayExternalContributors returns a boolean if a field has been set.
func (o *SettingsUpdateRequest) HasDisplayExternalContributors() bool {
	if o != nil && o.DisplayExternalContributors != nil {
		return true
	}

	return false
}

// SetDisplayExternalContributors gets a reference to the given bool and assigns it to the DisplayExternalContributors field.
func (o *SettingsUpdateRequest) SetDisplayExternalContributors(v bool) {
	o.DisplayExternalContributors = &v
}

// GetAuthenticationMethod returns the AuthenticationMethod field value
func (o *SettingsUpdateRequest) GetAuthenticationMethod() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AuthenticationMethod
}

// GetAuthenticationMethodOk returns a tuple with the AuthenticationMethod field value
// and a boolean to check if the value has been set.
func (o *SettingsUpdateRequest) GetAuthenticationMethodOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AuthenticationMethod, true
}

// SetAuthenticationMethod sets field value
func (o *SettingsUpdateRequest) SetAuthenticationMethod(v int32) {
	o.AuthenticationMethod = v
}

// GetLDAPSettings returns the LDAPSettings field value if set, zero value otherwise.
func (o *SettingsUpdateRequest) GetLDAPSettings() LDAPSettings {
	if o == nil || o.LDAPSettings == nil {
		var ret LDAPSettings
		return ret
	}
	return *o.LDAPSettings
}

// GetLDAPSettingsOk returns a tuple with the LDAPSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateRequest) GetLDAPSettingsOk() (*LDAPSettings, bool) {
	if o == nil || o.LDAPSettings == nil {
		return nil, false
	}
	return o.LDAPSettings, true
}

// HasLDAPSettings returns a boolean if a field has been set.
func (o *SettingsUpdateRequest) HasLDAPSettings() bool {
	if o != nil && o.LDAPSettings != nil {
		return true
	}

	return false
}

// SetLDAPSettings gets a reference to the given LDAPSettings and assigns it to the LDAPSettings field.
func (o *SettingsUpdateRequest) SetLDAPSettings(v LDAPSettings) {
	o.LDAPSettings = &v
}

// GetAllowBindMountsForRegularUsers returns the AllowBindMountsForRegularUsers field value if set, zero value otherwise.
func (o *SettingsUpdateRequest) GetAllowBindMountsForRegularUsers() bool {
	if o == nil || o.AllowBindMountsForRegularUsers == nil {
		var ret bool
		return ret
	}
	return *o.AllowBindMountsForRegularUsers
}

// GetAllowBindMountsForRegularUsersOk returns a tuple with the AllowBindMountsForRegularUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateRequest) GetAllowBindMountsForRegularUsersOk() (*bool, bool) {
	if o == nil || o.AllowBindMountsForRegularUsers == nil {
		return nil, false
	}
	return o.AllowBindMountsForRegularUsers, true
}

// HasAllowBindMountsForRegularUsers returns a boolean if a field has been set.
func (o *SettingsUpdateRequest) HasAllowBindMountsForRegularUsers() bool {
	if o != nil && o.AllowBindMountsForRegularUsers != nil {
		return true
	}

	return false
}

// SetAllowBindMountsForRegularUsers gets a reference to the given bool and assigns it to the AllowBindMountsForRegularUsers field.
func (o *SettingsUpdateRequest) SetAllowBindMountsForRegularUsers(v bool) {
	o.AllowBindMountsForRegularUsers = &v
}

// GetAllowPrivilegedModeForRegularUsers returns the AllowPrivilegedModeForRegularUsers field value if set, zero value otherwise.
func (o *SettingsUpdateRequest) GetAllowPrivilegedModeForRegularUsers() bool {
	if o == nil || o.AllowPrivilegedModeForRegularUsers == nil {
		var ret bool
		return ret
	}
	return *o.AllowPrivilegedModeForRegularUsers
}

// GetAllowPrivilegedModeForRegularUsersOk returns a tuple with the AllowPrivilegedModeForRegularUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateRequest) GetAllowPrivilegedModeForRegularUsersOk() (*bool, bool) {
	if o == nil || o.AllowPrivilegedModeForRegularUsers == nil {
		return nil, false
	}
	return o.AllowPrivilegedModeForRegularUsers, true
}

// HasAllowPrivilegedModeForRegularUsers returns a boolean if a field has been set.
func (o *SettingsUpdateRequest) HasAllowPrivilegedModeForRegularUsers() bool {
	if o != nil && o.AllowPrivilegedModeForRegularUsers != nil {
		return true
	}

	return false
}

// SetAllowPrivilegedModeForRegularUsers gets a reference to the given bool and assigns it to the AllowPrivilegedModeForRegularUsers field.
func (o *SettingsUpdateRequest) SetAllowPrivilegedModeForRegularUsers(v bool) {
	o.AllowPrivilegedModeForRegularUsers = &v
}

// GetEdgeAgentCheckinInterval returns the EdgeAgentCheckinInterval field value if set, zero value otherwise.
func (o *SettingsUpdateRequest) GetEdgeAgentCheckinInterval() int32 {
	if o == nil || o.EdgeAgentCheckinInterval == nil {
		var ret int32
		return ret
	}
	return *o.EdgeAgentCheckinInterval
}

// GetEdgeAgentCheckinIntervalOk returns a tuple with the EdgeAgentCheckinInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateRequest) GetEdgeAgentCheckinIntervalOk() (*int32, bool) {
	if o == nil || o.EdgeAgentCheckinInterval == nil {
		return nil, false
	}
	return o.EdgeAgentCheckinInterval, true
}

// HasEdgeAgentCheckinInterval returns a boolean if a field has been set.
func (o *SettingsUpdateRequest) HasEdgeAgentCheckinInterval() bool {
	if o != nil && o.EdgeAgentCheckinInterval != nil {
		return true
	}

	return false
}

// SetEdgeAgentCheckinInterval gets a reference to the given int32 and assigns it to the EdgeAgentCheckinInterval field.
func (o *SettingsUpdateRequest) SetEdgeAgentCheckinInterval(v int32) {
	o.EdgeAgentCheckinInterval = &v
}

func (o SettingsUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["TemplatesURL"] = o.TemplatesURL
	}
	if o.LogoURL != nil {
		toSerialize["LogoURL"] = o.LogoURL
	}
	if o.BlackListedLabels != nil {
		toSerialize["BlackListedLabels"] = o.BlackListedLabels
	}
	if o.DisplayExternalContributors != nil {
		toSerialize["DisplayExternalContributors"] = o.DisplayExternalContributors
	}
	if true {
		toSerialize["AuthenticationMethod"] = o.AuthenticationMethod
	}
	if o.LDAPSettings != nil {
		toSerialize["LDAPSettings"] = o.LDAPSettings
	}
	if o.AllowBindMountsForRegularUsers != nil {
		toSerialize["AllowBindMountsForRegularUsers"] = o.AllowBindMountsForRegularUsers
	}
	if o.AllowPrivilegedModeForRegularUsers != nil {
		toSerialize["AllowPrivilegedModeForRegularUsers"] = o.AllowPrivilegedModeForRegularUsers
	}
	if o.EdgeAgentCheckinInterval != nil {
		toSerialize["EdgeAgentCheckinInterval"] = o.EdgeAgentCheckinInterval
	}
	return json.Marshal(toSerialize)
}

type NullableSettingsUpdateRequest struct {
	value *SettingsUpdateRequest
	isSet bool
}

func (v NullableSettingsUpdateRequest) Get() *SettingsUpdateRequest {
	return v.value
}

func (v *NullableSettingsUpdateRequest) Set(val *SettingsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsUpdateRequest(val *SettingsUpdateRequest) *NullableSettingsUpdateRequest {
	return &NullableSettingsUpdateRequest{value: val, isSet: true}
}

func (v NullableSettingsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


