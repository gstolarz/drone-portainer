/*
 * Portainer API
 *
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8 You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example: ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available: * Public access * Authenticated access * Restricted access * Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8). 
 *
 * API version: 1.24.1
 * Contact: info@portainer.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portainer

import (
	"encoding/json"
)

// ResourceControl struct for ResourceControl
type ResourceControl struct {
	// Docker resource identifier on which access control will be applied. In the case of a resource control applied to a stack, use the stack name as identifier
	ResourceID *string `json:"ResourceID,omitempty"`
	// Type of Docker resource. Valid values are: container, volume service, secret, config or stack
	Type *string `json:"Type,omitempty"`
	// Permit access to the associated resource to any user
	Public *bool `json:"Public,omitempty"`
	// List of user identifiers with access to the associated resource
	Users *[]int32 `json:"Users,omitempty"`
	// List of team identifiers with access to the associated resource
	Teams *[]int32 `json:"Teams,omitempty"`
	// List of Docker resources that will inherit this access control
	SubResourceIDs *[]string `json:"SubResourceIDs,omitempty"`
}

// NewResourceControl instantiates a new ResourceControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceControl() *ResourceControl {
	this := ResourceControl{}
	return &this
}

// NewResourceControlWithDefaults instantiates a new ResourceControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceControlWithDefaults() *ResourceControl {
	this := ResourceControl{}
	return &this
}

// GetResourceID returns the ResourceID field value if set, zero value otherwise.
func (o *ResourceControl) GetResourceID() string {
	if o == nil || o.ResourceID == nil {
		var ret string
		return ret
	}
	return *o.ResourceID
}

// GetResourceIDOk returns a tuple with the ResourceID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceControl) GetResourceIDOk() (*string, bool) {
	if o == nil || o.ResourceID == nil {
		return nil, false
	}
	return o.ResourceID, true
}

// HasResourceID returns a boolean if a field has been set.
func (o *ResourceControl) HasResourceID() bool {
	if o != nil && o.ResourceID != nil {
		return true
	}

	return false
}

// SetResourceID gets a reference to the given string and assigns it to the ResourceID field.
func (o *ResourceControl) SetResourceID(v string) {
	o.ResourceID = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceControl) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceControl) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceControl) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResourceControl) SetType(v string) {
	o.Type = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *ResourceControl) GetPublic() bool {
	if o == nil || o.Public == nil {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceControl) GetPublicOk() (*bool, bool) {
	if o == nil || o.Public == nil {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *ResourceControl) HasPublic() bool {
	if o != nil && o.Public != nil {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *ResourceControl) SetPublic(v bool) {
	o.Public = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *ResourceControl) GetUsers() []int32 {
	if o == nil || o.Users == nil {
		var ret []int32
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceControl) GetUsersOk() (*[]int32, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *ResourceControl) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []int32 and assigns it to the Users field.
func (o *ResourceControl) SetUsers(v []int32) {
	o.Users = &v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *ResourceControl) GetTeams() []int32 {
	if o == nil || o.Teams == nil {
		var ret []int32
		return ret
	}
	return *o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceControl) GetTeamsOk() (*[]int32, bool) {
	if o == nil || o.Teams == nil {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *ResourceControl) HasTeams() bool {
	if o != nil && o.Teams != nil {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []int32 and assigns it to the Teams field.
func (o *ResourceControl) SetTeams(v []int32) {
	o.Teams = &v
}

// GetSubResourceIDs returns the SubResourceIDs field value if set, zero value otherwise.
func (o *ResourceControl) GetSubResourceIDs() []string {
	if o == nil || o.SubResourceIDs == nil {
		var ret []string
		return ret
	}
	return *o.SubResourceIDs
}

// GetSubResourceIDsOk returns a tuple with the SubResourceIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceControl) GetSubResourceIDsOk() (*[]string, bool) {
	if o == nil || o.SubResourceIDs == nil {
		return nil, false
	}
	return o.SubResourceIDs, true
}

// HasSubResourceIDs returns a boolean if a field has been set.
func (o *ResourceControl) HasSubResourceIDs() bool {
	if o != nil && o.SubResourceIDs != nil {
		return true
	}

	return false
}

// SetSubResourceIDs gets a reference to the given []string and assigns it to the SubResourceIDs field.
func (o *ResourceControl) SetSubResourceIDs(v []string) {
	o.SubResourceIDs = &v
}

func (o ResourceControl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceID != nil {
		toSerialize["ResourceID"] = o.ResourceID
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Public != nil {
		toSerialize["Public"] = o.Public
	}
	if o.Users != nil {
		toSerialize["Users"] = o.Users
	}
	if o.Teams != nil {
		toSerialize["Teams"] = o.Teams
	}
	if o.SubResourceIDs != nil {
		toSerialize["SubResourceIDs"] = o.SubResourceIDs
	}
	return json.Marshal(toSerialize)
}

type NullableResourceControl struct {
	value *ResourceControl
	isSet bool
}

func (v NullableResourceControl) Get() *ResourceControl {
	return v.value
}

func (v *NullableResourceControl) Set(val *ResourceControl) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceControl) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceControl(val *ResourceControl) *NullableResourceControl {
	return &NullableResourceControl{value: val, isSet: true}
}

func (v NullableResourceControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


