/*
 * Portainer API
 *
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8 You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example: ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available: * Public access * Authenticated access * Restricted access * Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8). 
 *
 * API version: 1.24.1
 * Contact: info@portainer.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portainer

import (
	"encoding/json"
)

// StackCreateRequest struct for StackCreateRequest
type StackCreateRequest struct {
	// Name of the stack
	Name string `json:"Name"`
	// Swarm cluster identifier. Required when creating a Swarm stack (type 1).
	SwarmID *string `json:"SwarmID,omitempty"`
	// Content of the Stack file. Required when using the 'string' deployment method.
	StackFileContent *string `json:"StackFileContent,omitempty"`
	// URL of a Git repository hosting the Stack file. Required when using the 'repository' deployment method.
	RepositoryURL *string `json:"RepositoryURL,omitempty"`
	// Reference name of a Git repository hosting the Stack file. Used in 'repository' deployment method.
	RepositoryReferenceName *string `json:"RepositoryReferenceName,omitempty"`
	// Path to the Stack file inside the Git repository. Will default to 'docker-compose.yml' if not specified.
	ComposeFilePathInRepository *string `json:"ComposeFilePathInRepository,omitempty"`
	// Use basic authentication to clone the Git repository.
	RepositoryAuthentication *bool `json:"RepositoryAuthentication,omitempty"`
	// Username used in basic authentication. Required when RepositoryAuthentication is true.
	RepositoryUsername *string `json:"RepositoryUsername,omitempty"`
	// Password used in basic authentication. Required when RepositoryAuthentication is true.
	RepositoryPassword *string `json:"RepositoryPassword,omitempty"`
	// A list of environment variables used during stack deployment
	Env *[]StackEnv `json:"Env,omitempty"`
}

// NewStackCreateRequest instantiates a new StackCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackCreateRequest(name string) *StackCreateRequest {
	this := StackCreateRequest{}
	this.Name = name
	return &this
}

// NewStackCreateRequestWithDefaults instantiates a new StackCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackCreateRequestWithDefaults() *StackCreateRequest {
	this := StackCreateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *StackCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StackCreateRequest) SetName(v string) {
	o.Name = v
}

// GetSwarmID returns the SwarmID field value if set, zero value otherwise.
func (o *StackCreateRequest) GetSwarmID() string {
	if o == nil || o.SwarmID == nil {
		var ret string
		return ret
	}
	return *o.SwarmID
}

// GetSwarmIDOk returns a tuple with the SwarmID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetSwarmIDOk() (*string, bool) {
	if o == nil || o.SwarmID == nil {
		return nil, false
	}
	return o.SwarmID, true
}

// HasSwarmID returns a boolean if a field has been set.
func (o *StackCreateRequest) HasSwarmID() bool {
	if o != nil && o.SwarmID != nil {
		return true
	}

	return false
}

// SetSwarmID gets a reference to the given string and assigns it to the SwarmID field.
func (o *StackCreateRequest) SetSwarmID(v string) {
	o.SwarmID = &v
}

// GetStackFileContent returns the StackFileContent field value if set, zero value otherwise.
func (o *StackCreateRequest) GetStackFileContent() string {
	if o == nil || o.StackFileContent == nil {
		var ret string
		return ret
	}
	return *o.StackFileContent
}

// GetStackFileContentOk returns a tuple with the StackFileContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetStackFileContentOk() (*string, bool) {
	if o == nil || o.StackFileContent == nil {
		return nil, false
	}
	return o.StackFileContent, true
}

// HasStackFileContent returns a boolean if a field has been set.
func (o *StackCreateRequest) HasStackFileContent() bool {
	if o != nil && o.StackFileContent != nil {
		return true
	}

	return false
}

// SetStackFileContent gets a reference to the given string and assigns it to the StackFileContent field.
func (o *StackCreateRequest) SetStackFileContent(v string) {
	o.StackFileContent = &v
}

// GetRepositoryURL returns the RepositoryURL field value if set, zero value otherwise.
func (o *StackCreateRequest) GetRepositoryURL() string {
	if o == nil || o.RepositoryURL == nil {
		var ret string
		return ret
	}
	return *o.RepositoryURL
}

// GetRepositoryURLOk returns a tuple with the RepositoryURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetRepositoryURLOk() (*string, bool) {
	if o == nil || o.RepositoryURL == nil {
		return nil, false
	}
	return o.RepositoryURL, true
}

// HasRepositoryURL returns a boolean if a field has been set.
func (o *StackCreateRequest) HasRepositoryURL() bool {
	if o != nil && o.RepositoryURL != nil {
		return true
	}

	return false
}

// SetRepositoryURL gets a reference to the given string and assigns it to the RepositoryURL field.
func (o *StackCreateRequest) SetRepositoryURL(v string) {
	o.RepositoryURL = &v
}

// GetRepositoryReferenceName returns the RepositoryReferenceName field value if set, zero value otherwise.
func (o *StackCreateRequest) GetRepositoryReferenceName() string {
	if o == nil || o.RepositoryReferenceName == nil {
		var ret string
		return ret
	}
	return *o.RepositoryReferenceName
}

// GetRepositoryReferenceNameOk returns a tuple with the RepositoryReferenceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetRepositoryReferenceNameOk() (*string, bool) {
	if o == nil || o.RepositoryReferenceName == nil {
		return nil, false
	}
	return o.RepositoryReferenceName, true
}

// HasRepositoryReferenceName returns a boolean if a field has been set.
func (o *StackCreateRequest) HasRepositoryReferenceName() bool {
	if o != nil && o.RepositoryReferenceName != nil {
		return true
	}

	return false
}

// SetRepositoryReferenceName gets a reference to the given string and assigns it to the RepositoryReferenceName field.
func (o *StackCreateRequest) SetRepositoryReferenceName(v string) {
	o.RepositoryReferenceName = &v
}

// GetComposeFilePathInRepository returns the ComposeFilePathInRepository field value if set, zero value otherwise.
func (o *StackCreateRequest) GetComposeFilePathInRepository() string {
	if o == nil || o.ComposeFilePathInRepository == nil {
		var ret string
		return ret
	}
	return *o.ComposeFilePathInRepository
}

// GetComposeFilePathInRepositoryOk returns a tuple with the ComposeFilePathInRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetComposeFilePathInRepositoryOk() (*string, bool) {
	if o == nil || o.ComposeFilePathInRepository == nil {
		return nil, false
	}
	return o.ComposeFilePathInRepository, true
}

// HasComposeFilePathInRepository returns a boolean if a field has been set.
func (o *StackCreateRequest) HasComposeFilePathInRepository() bool {
	if o != nil && o.ComposeFilePathInRepository != nil {
		return true
	}

	return false
}

// SetComposeFilePathInRepository gets a reference to the given string and assigns it to the ComposeFilePathInRepository field.
func (o *StackCreateRequest) SetComposeFilePathInRepository(v string) {
	o.ComposeFilePathInRepository = &v
}

// GetRepositoryAuthentication returns the RepositoryAuthentication field value if set, zero value otherwise.
func (o *StackCreateRequest) GetRepositoryAuthentication() bool {
	if o == nil || o.RepositoryAuthentication == nil {
		var ret bool
		return ret
	}
	return *o.RepositoryAuthentication
}

// GetRepositoryAuthenticationOk returns a tuple with the RepositoryAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetRepositoryAuthenticationOk() (*bool, bool) {
	if o == nil || o.RepositoryAuthentication == nil {
		return nil, false
	}
	return o.RepositoryAuthentication, true
}

// HasRepositoryAuthentication returns a boolean if a field has been set.
func (o *StackCreateRequest) HasRepositoryAuthentication() bool {
	if o != nil && o.RepositoryAuthentication != nil {
		return true
	}

	return false
}

// SetRepositoryAuthentication gets a reference to the given bool and assigns it to the RepositoryAuthentication field.
func (o *StackCreateRequest) SetRepositoryAuthentication(v bool) {
	o.RepositoryAuthentication = &v
}

// GetRepositoryUsername returns the RepositoryUsername field value if set, zero value otherwise.
func (o *StackCreateRequest) GetRepositoryUsername() string {
	if o == nil || o.RepositoryUsername == nil {
		var ret string
		return ret
	}
	return *o.RepositoryUsername
}

// GetRepositoryUsernameOk returns a tuple with the RepositoryUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetRepositoryUsernameOk() (*string, bool) {
	if o == nil || o.RepositoryUsername == nil {
		return nil, false
	}
	return o.RepositoryUsername, true
}

// HasRepositoryUsername returns a boolean if a field has been set.
func (o *StackCreateRequest) HasRepositoryUsername() bool {
	if o != nil && o.RepositoryUsername != nil {
		return true
	}

	return false
}

// SetRepositoryUsername gets a reference to the given string and assigns it to the RepositoryUsername field.
func (o *StackCreateRequest) SetRepositoryUsername(v string) {
	o.RepositoryUsername = &v
}

// GetRepositoryPassword returns the RepositoryPassword field value if set, zero value otherwise.
func (o *StackCreateRequest) GetRepositoryPassword() string {
	if o == nil || o.RepositoryPassword == nil {
		var ret string
		return ret
	}
	return *o.RepositoryPassword
}

// GetRepositoryPasswordOk returns a tuple with the RepositoryPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetRepositoryPasswordOk() (*string, bool) {
	if o == nil || o.RepositoryPassword == nil {
		return nil, false
	}
	return o.RepositoryPassword, true
}

// HasRepositoryPassword returns a boolean if a field has been set.
func (o *StackCreateRequest) HasRepositoryPassword() bool {
	if o != nil && o.RepositoryPassword != nil {
		return true
	}

	return false
}

// SetRepositoryPassword gets a reference to the given string and assigns it to the RepositoryPassword field.
func (o *StackCreateRequest) SetRepositoryPassword(v string) {
	o.RepositoryPassword = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *StackCreateRequest) GetEnv() []StackEnv {
	if o == nil || o.Env == nil {
		var ret []StackEnv
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackCreateRequest) GetEnvOk() (*[]StackEnv, bool) {
	if o == nil || o.Env == nil {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *StackCreateRequest) HasEnv() bool {
	if o != nil && o.Env != nil {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []StackEnv and assigns it to the Env field.
func (o *StackCreateRequest) SetEnv(v []StackEnv) {
	o.Env = &v
}

func (o StackCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Name"] = o.Name
	}
	if o.SwarmID != nil {
		toSerialize["SwarmID"] = o.SwarmID
	}
	if o.StackFileContent != nil {
		toSerialize["StackFileContent"] = o.StackFileContent
	}
	if o.RepositoryURL != nil {
		toSerialize["RepositoryURL"] = o.RepositoryURL
	}
	if o.RepositoryReferenceName != nil {
		toSerialize["RepositoryReferenceName"] = o.RepositoryReferenceName
	}
	if o.ComposeFilePathInRepository != nil {
		toSerialize["ComposeFilePathInRepository"] = o.ComposeFilePathInRepository
	}
	if o.RepositoryAuthentication != nil {
		toSerialize["RepositoryAuthentication"] = o.RepositoryAuthentication
	}
	if o.RepositoryUsername != nil {
		toSerialize["RepositoryUsername"] = o.RepositoryUsername
	}
	if o.RepositoryPassword != nil {
		toSerialize["RepositoryPassword"] = o.RepositoryPassword
	}
	if o.Env != nil {
		toSerialize["Env"] = o.Env
	}
	return json.Marshal(toSerialize)
}

type NullableStackCreateRequest struct {
	value *StackCreateRequest
	isSet bool
}

func (v NullableStackCreateRequest) Get() *StackCreateRequest {
	return v.value
}

func (v *NullableStackCreateRequest) Set(val *StackCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStackCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStackCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackCreateRequest(val *StackCreateRequest) *NullableStackCreateRequest {
	return &NullableStackCreateRequest{value: val, isSet: true}
}

func (v NullableStackCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


