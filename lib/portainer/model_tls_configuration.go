/*
 * Portainer API
 *
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8 You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example: ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available: * Public access * Authenticated access * Restricted access * Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8). 
 *
 * API version: 1.24.1
 * Contact: info@portainer.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portainer

import (
	"encoding/json"
)

// TLSConfiguration struct for TLSConfiguration
type TLSConfiguration struct {
	// Use TLS
	TLS *bool `json:"TLS,omitempty"`
	// Skip the verification of the server TLS certificate
	TLSSkipVerify *bool `json:"TLSSkipVerify,omitempty"`
	// Path to the TLS CA certificate file
	TLSCACertPath *string `json:"TLSCACertPath,omitempty"`
	// Path to the TLS client certificate file
	TLSCertPath *string `json:"TLSCertPath,omitempty"`
	// Path to the TLS client key file
	TLSKeyPath *string `json:"TLSKeyPath,omitempty"`
}

// NewTLSConfiguration instantiates a new TLSConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTLSConfiguration() *TLSConfiguration {
	this := TLSConfiguration{}
	return &this
}

// NewTLSConfigurationWithDefaults instantiates a new TLSConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTLSConfigurationWithDefaults() *TLSConfiguration {
	this := TLSConfiguration{}
	return &this
}

// GetTLS returns the TLS field value if set, zero value otherwise.
func (o *TLSConfiguration) GetTLS() bool {
	if o == nil || o.TLS == nil {
		var ret bool
		return ret
	}
	return *o.TLS
}

// GetTLSOk returns a tuple with the TLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSConfiguration) GetTLSOk() (*bool, bool) {
	if o == nil || o.TLS == nil {
		return nil, false
	}
	return o.TLS, true
}

// HasTLS returns a boolean if a field has been set.
func (o *TLSConfiguration) HasTLS() bool {
	if o != nil && o.TLS != nil {
		return true
	}

	return false
}

// SetTLS gets a reference to the given bool and assigns it to the TLS field.
func (o *TLSConfiguration) SetTLS(v bool) {
	o.TLS = &v
}

// GetTLSSkipVerify returns the TLSSkipVerify field value if set, zero value otherwise.
func (o *TLSConfiguration) GetTLSSkipVerify() bool {
	if o == nil || o.TLSSkipVerify == nil {
		var ret bool
		return ret
	}
	return *o.TLSSkipVerify
}

// GetTLSSkipVerifyOk returns a tuple with the TLSSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSConfiguration) GetTLSSkipVerifyOk() (*bool, bool) {
	if o == nil || o.TLSSkipVerify == nil {
		return nil, false
	}
	return o.TLSSkipVerify, true
}

// HasTLSSkipVerify returns a boolean if a field has been set.
func (o *TLSConfiguration) HasTLSSkipVerify() bool {
	if o != nil && o.TLSSkipVerify != nil {
		return true
	}

	return false
}

// SetTLSSkipVerify gets a reference to the given bool and assigns it to the TLSSkipVerify field.
func (o *TLSConfiguration) SetTLSSkipVerify(v bool) {
	o.TLSSkipVerify = &v
}

// GetTLSCACertPath returns the TLSCACertPath field value if set, zero value otherwise.
func (o *TLSConfiguration) GetTLSCACertPath() string {
	if o == nil || o.TLSCACertPath == nil {
		var ret string
		return ret
	}
	return *o.TLSCACertPath
}

// GetTLSCACertPathOk returns a tuple with the TLSCACertPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSConfiguration) GetTLSCACertPathOk() (*string, bool) {
	if o == nil || o.TLSCACertPath == nil {
		return nil, false
	}
	return o.TLSCACertPath, true
}

// HasTLSCACertPath returns a boolean if a field has been set.
func (o *TLSConfiguration) HasTLSCACertPath() bool {
	if o != nil && o.TLSCACertPath != nil {
		return true
	}

	return false
}

// SetTLSCACertPath gets a reference to the given string and assigns it to the TLSCACertPath field.
func (o *TLSConfiguration) SetTLSCACertPath(v string) {
	o.TLSCACertPath = &v
}

// GetTLSCertPath returns the TLSCertPath field value if set, zero value otherwise.
func (o *TLSConfiguration) GetTLSCertPath() string {
	if o == nil || o.TLSCertPath == nil {
		var ret string
		return ret
	}
	return *o.TLSCertPath
}

// GetTLSCertPathOk returns a tuple with the TLSCertPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSConfiguration) GetTLSCertPathOk() (*string, bool) {
	if o == nil || o.TLSCertPath == nil {
		return nil, false
	}
	return o.TLSCertPath, true
}

// HasTLSCertPath returns a boolean if a field has been set.
func (o *TLSConfiguration) HasTLSCertPath() bool {
	if o != nil && o.TLSCertPath != nil {
		return true
	}

	return false
}

// SetTLSCertPath gets a reference to the given string and assigns it to the TLSCertPath field.
func (o *TLSConfiguration) SetTLSCertPath(v string) {
	o.TLSCertPath = &v
}

// GetTLSKeyPath returns the TLSKeyPath field value if set, zero value otherwise.
func (o *TLSConfiguration) GetTLSKeyPath() string {
	if o == nil || o.TLSKeyPath == nil {
		var ret string
		return ret
	}
	return *o.TLSKeyPath
}

// GetTLSKeyPathOk returns a tuple with the TLSKeyPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSConfiguration) GetTLSKeyPathOk() (*string, bool) {
	if o == nil || o.TLSKeyPath == nil {
		return nil, false
	}
	return o.TLSKeyPath, true
}

// HasTLSKeyPath returns a boolean if a field has been set.
func (o *TLSConfiguration) HasTLSKeyPath() bool {
	if o != nil && o.TLSKeyPath != nil {
		return true
	}

	return false
}

// SetTLSKeyPath gets a reference to the given string and assigns it to the TLSKeyPath field.
func (o *TLSConfiguration) SetTLSKeyPath(v string) {
	o.TLSKeyPath = &v
}

func (o TLSConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TLS != nil {
		toSerialize["TLS"] = o.TLS
	}
	if o.TLSSkipVerify != nil {
		toSerialize["TLSSkipVerify"] = o.TLSSkipVerify
	}
	if o.TLSCACertPath != nil {
		toSerialize["TLSCACertPath"] = o.TLSCACertPath
	}
	if o.TLSCertPath != nil {
		toSerialize["TLSCertPath"] = o.TLSCertPath
	}
	if o.TLSKeyPath != nil {
		toSerialize["TLSKeyPath"] = o.TLSKeyPath
	}
	return json.Marshal(toSerialize)
}

type NullableTLSConfiguration struct {
	value *TLSConfiguration
	isSet bool
}

func (v NullableTLSConfiguration) Get() *TLSConfiguration {
	return v.value
}

func (v *NullableTLSConfiguration) Set(val *TLSConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableTLSConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableTLSConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTLSConfiguration(val *TLSConfiguration) *NullableTLSConfiguration {
	return &NullableTLSConfiguration{value: val, isSet: true}
}

func (v NullableTLSConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTLSConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


