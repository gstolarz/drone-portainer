/*
 * Portainer API
 *
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8 You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example: ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available: * Public access * Authenticated access * Restricted access * Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8). 
 *
 * API version: 1.24.1
 * Contact: info@portainer.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portainer

import (
	"encoding/json"
)

// EndpointUpdateRequest struct for EndpointUpdateRequest
type EndpointUpdateRequest struct {
	// Name that will be used to identify this endpoint
	Name *string `json:"Name,omitempty"`
	// URL or IP address of a Docker host
	URL *string `json:"URL,omitempty"`
	// URL or IP address where exposed containers will be reachable. Defaults to URL if not specified
	PublicURL *string `json:"PublicURL,omitempty"`
	// Group identifier
	GroupID *int32 `json:"GroupID,omitempty"`
	// Require TLS to connect against this endpoint
	TLS *bool `json:"TLS,omitempty"`
	// Skip server verification when using TLS
	TLSSkipVerify *bool `json:"TLSSkipVerify,omitempty"`
	// Skip client verification when using TLS
	TLSSkipClientVerify *bool `json:"TLSSkipClientVerify,omitempty"`
	// Azure application ID
	ApplicationID *string `json:"ApplicationID,omitempty"`
	// Azure tenant ID
	TenantID *string `json:"TenantID,omitempty"`
	// Azure authentication key
	AuthenticationKey *string `json:"AuthenticationKey,omitempty"`
	// User access policies associated to a registry/endpoint/endpoint group. RoleID is not required for registry access policies and can be set to 0.
	UserAccessPolicies *map[string]AccessPolicy `json:"UserAccessPolicies,omitempty"`
	// Team access policies associated to a registry/endpoint/endpoint group. RoleID is not required for registry access policies and can be set to 0.
	TeamAccessPolicies *map[string]AccessPolicy `json:"TeamAccessPolicies,omitempty"`
}

// NewEndpointUpdateRequest instantiates a new EndpointUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointUpdateRequest() *EndpointUpdateRequest {
	this := EndpointUpdateRequest{}
	return &this
}

// NewEndpointUpdateRequestWithDefaults instantiates a new EndpointUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointUpdateRequestWithDefaults() *EndpointUpdateRequest {
	this := EndpointUpdateRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EndpointUpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetURL returns the URL field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetURL() string {
	if o == nil || o.URL == nil {
		var ret string
		return ret
	}
	return *o.URL
}

// GetURLOk returns a tuple with the URL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetURLOk() (*string, bool) {
	if o == nil || o.URL == nil {
		return nil, false
	}
	return o.URL, true
}

// HasURL returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasURL() bool {
	if o != nil && o.URL != nil {
		return true
	}

	return false
}

// SetURL gets a reference to the given string and assigns it to the URL field.
func (o *EndpointUpdateRequest) SetURL(v string) {
	o.URL = &v
}

// GetPublicURL returns the PublicURL field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetPublicURL() string {
	if o == nil || o.PublicURL == nil {
		var ret string
		return ret
	}
	return *o.PublicURL
}

// GetPublicURLOk returns a tuple with the PublicURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetPublicURLOk() (*string, bool) {
	if o == nil || o.PublicURL == nil {
		return nil, false
	}
	return o.PublicURL, true
}

// HasPublicURL returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasPublicURL() bool {
	if o != nil && o.PublicURL != nil {
		return true
	}

	return false
}

// SetPublicURL gets a reference to the given string and assigns it to the PublicURL field.
func (o *EndpointUpdateRequest) SetPublicURL(v string) {
	o.PublicURL = &v
}

// GetGroupID returns the GroupID field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetGroupID() int32 {
	if o == nil || o.GroupID == nil {
		var ret int32
		return ret
	}
	return *o.GroupID
}

// GetGroupIDOk returns a tuple with the GroupID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetGroupIDOk() (*int32, bool) {
	if o == nil || o.GroupID == nil {
		return nil, false
	}
	return o.GroupID, true
}

// HasGroupID returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasGroupID() bool {
	if o != nil && o.GroupID != nil {
		return true
	}

	return false
}

// SetGroupID gets a reference to the given int32 and assigns it to the GroupID field.
func (o *EndpointUpdateRequest) SetGroupID(v int32) {
	o.GroupID = &v
}

// GetTLS returns the TLS field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetTLS() bool {
	if o == nil || o.TLS == nil {
		var ret bool
		return ret
	}
	return *o.TLS
}

// GetTLSOk returns a tuple with the TLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetTLSOk() (*bool, bool) {
	if o == nil || o.TLS == nil {
		return nil, false
	}
	return o.TLS, true
}

// HasTLS returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasTLS() bool {
	if o != nil && o.TLS != nil {
		return true
	}

	return false
}

// SetTLS gets a reference to the given bool and assigns it to the TLS field.
func (o *EndpointUpdateRequest) SetTLS(v bool) {
	o.TLS = &v
}

// GetTLSSkipVerify returns the TLSSkipVerify field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetTLSSkipVerify() bool {
	if o == nil || o.TLSSkipVerify == nil {
		var ret bool
		return ret
	}
	return *o.TLSSkipVerify
}

// GetTLSSkipVerifyOk returns a tuple with the TLSSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetTLSSkipVerifyOk() (*bool, bool) {
	if o == nil || o.TLSSkipVerify == nil {
		return nil, false
	}
	return o.TLSSkipVerify, true
}

// HasTLSSkipVerify returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasTLSSkipVerify() bool {
	if o != nil && o.TLSSkipVerify != nil {
		return true
	}

	return false
}

// SetTLSSkipVerify gets a reference to the given bool and assigns it to the TLSSkipVerify field.
func (o *EndpointUpdateRequest) SetTLSSkipVerify(v bool) {
	o.TLSSkipVerify = &v
}

// GetTLSSkipClientVerify returns the TLSSkipClientVerify field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetTLSSkipClientVerify() bool {
	if o == nil || o.TLSSkipClientVerify == nil {
		var ret bool
		return ret
	}
	return *o.TLSSkipClientVerify
}

// GetTLSSkipClientVerifyOk returns a tuple with the TLSSkipClientVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetTLSSkipClientVerifyOk() (*bool, bool) {
	if o == nil || o.TLSSkipClientVerify == nil {
		return nil, false
	}
	return o.TLSSkipClientVerify, true
}

// HasTLSSkipClientVerify returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasTLSSkipClientVerify() bool {
	if o != nil && o.TLSSkipClientVerify != nil {
		return true
	}

	return false
}

// SetTLSSkipClientVerify gets a reference to the given bool and assigns it to the TLSSkipClientVerify field.
func (o *EndpointUpdateRequest) SetTLSSkipClientVerify(v bool) {
	o.TLSSkipClientVerify = &v
}

// GetApplicationID returns the ApplicationID field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetApplicationID() string {
	if o == nil || o.ApplicationID == nil {
		var ret string
		return ret
	}
	return *o.ApplicationID
}

// GetApplicationIDOk returns a tuple with the ApplicationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetApplicationIDOk() (*string, bool) {
	if o == nil || o.ApplicationID == nil {
		return nil, false
	}
	return o.ApplicationID, true
}

// HasApplicationID returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasApplicationID() bool {
	if o != nil && o.ApplicationID != nil {
		return true
	}

	return false
}

// SetApplicationID gets a reference to the given string and assigns it to the ApplicationID field.
func (o *EndpointUpdateRequest) SetApplicationID(v string) {
	o.ApplicationID = &v
}

// GetTenantID returns the TenantID field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetTenantID() string {
	if o == nil || o.TenantID == nil {
		var ret string
		return ret
	}
	return *o.TenantID
}

// GetTenantIDOk returns a tuple with the TenantID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetTenantIDOk() (*string, bool) {
	if o == nil || o.TenantID == nil {
		return nil, false
	}
	return o.TenantID, true
}

// HasTenantID returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasTenantID() bool {
	if o != nil && o.TenantID != nil {
		return true
	}

	return false
}

// SetTenantID gets a reference to the given string and assigns it to the TenantID field.
func (o *EndpointUpdateRequest) SetTenantID(v string) {
	o.TenantID = &v
}

// GetAuthenticationKey returns the AuthenticationKey field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetAuthenticationKey() string {
	if o == nil || o.AuthenticationKey == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationKey
}

// GetAuthenticationKeyOk returns a tuple with the AuthenticationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetAuthenticationKeyOk() (*string, bool) {
	if o == nil || o.AuthenticationKey == nil {
		return nil, false
	}
	return o.AuthenticationKey, true
}

// HasAuthenticationKey returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasAuthenticationKey() bool {
	if o != nil && o.AuthenticationKey != nil {
		return true
	}

	return false
}

// SetAuthenticationKey gets a reference to the given string and assigns it to the AuthenticationKey field.
func (o *EndpointUpdateRequest) SetAuthenticationKey(v string) {
	o.AuthenticationKey = &v
}

// GetUserAccessPolicies returns the UserAccessPolicies field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetUserAccessPolicies() map[string]AccessPolicy {
	if o == nil || o.UserAccessPolicies == nil {
		var ret map[string]AccessPolicy
		return ret
	}
	return *o.UserAccessPolicies
}

// GetUserAccessPoliciesOk returns a tuple with the UserAccessPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetUserAccessPoliciesOk() (*map[string]AccessPolicy, bool) {
	if o == nil || o.UserAccessPolicies == nil {
		return nil, false
	}
	return o.UserAccessPolicies, true
}

// HasUserAccessPolicies returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasUserAccessPolicies() bool {
	if o != nil && o.UserAccessPolicies != nil {
		return true
	}

	return false
}

// SetUserAccessPolicies gets a reference to the given map[string]AccessPolicy and assigns it to the UserAccessPolicies field.
func (o *EndpointUpdateRequest) SetUserAccessPolicies(v map[string]AccessPolicy) {
	o.UserAccessPolicies = &v
}

// GetTeamAccessPolicies returns the TeamAccessPolicies field value if set, zero value otherwise.
func (o *EndpointUpdateRequest) GetTeamAccessPolicies() map[string]AccessPolicy {
	if o == nil || o.TeamAccessPolicies == nil {
		var ret map[string]AccessPolicy
		return ret
	}
	return *o.TeamAccessPolicies
}

// GetTeamAccessPoliciesOk returns a tuple with the TeamAccessPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointUpdateRequest) GetTeamAccessPoliciesOk() (*map[string]AccessPolicy, bool) {
	if o == nil || o.TeamAccessPolicies == nil {
		return nil, false
	}
	return o.TeamAccessPolicies, true
}

// HasTeamAccessPolicies returns a boolean if a field has been set.
func (o *EndpointUpdateRequest) HasTeamAccessPolicies() bool {
	if o != nil && o.TeamAccessPolicies != nil {
		return true
	}

	return false
}

// SetTeamAccessPolicies gets a reference to the given map[string]AccessPolicy and assigns it to the TeamAccessPolicies field.
func (o *EndpointUpdateRequest) SetTeamAccessPolicies(v map[string]AccessPolicy) {
	o.TeamAccessPolicies = &v
}

func (o EndpointUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.URL != nil {
		toSerialize["URL"] = o.URL
	}
	if o.PublicURL != nil {
		toSerialize["PublicURL"] = o.PublicURL
	}
	if o.GroupID != nil {
		toSerialize["GroupID"] = o.GroupID
	}
	if o.TLS != nil {
		toSerialize["TLS"] = o.TLS
	}
	if o.TLSSkipVerify != nil {
		toSerialize["TLSSkipVerify"] = o.TLSSkipVerify
	}
	if o.TLSSkipClientVerify != nil {
		toSerialize["TLSSkipClientVerify"] = o.TLSSkipClientVerify
	}
	if o.ApplicationID != nil {
		toSerialize["ApplicationID"] = o.ApplicationID
	}
	if o.TenantID != nil {
		toSerialize["TenantID"] = o.TenantID
	}
	if o.AuthenticationKey != nil {
		toSerialize["AuthenticationKey"] = o.AuthenticationKey
	}
	if o.UserAccessPolicies != nil {
		toSerialize["UserAccessPolicies"] = o.UserAccessPolicies
	}
	if o.TeamAccessPolicies != nil {
		toSerialize["TeamAccessPolicies"] = o.TeamAccessPolicies
	}
	return json.Marshal(toSerialize)
}

type NullableEndpointUpdateRequest struct {
	value *EndpointUpdateRequest
	isSet bool
}

func (v NullableEndpointUpdateRequest) Get() *EndpointUpdateRequest {
	return v.value
}

func (v *NullableEndpointUpdateRequest) Set(val *EndpointUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointUpdateRequest(val *EndpointUpdateRequest) *NullableEndpointUpdateRequest {
	return &NullableEndpointUpdateRequest{value: val, isSet: true}
}

func (v NullableEndpointUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


