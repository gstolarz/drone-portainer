/*
 * Portainer API
 *
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8 You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example: ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available: * Public access * Authenticated access * Restricted access * Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8). 
 *
 * API version: 1.24.1
 * Contact: info@portainer.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portainer

import (
	"encoding/json"
)

// LDAPGroupSearchSettings struct for LDAPGroupSearchSettings
type LDAPGroupSearchSettings struct {
	// The distinguished name of the element from which the LDAP server will search for groups.
	GroupBaseDN *string `json:"GroupBaseDN,omitempty"`
	// The LDAP search filter used to select group elements, optional.
	GroupFilter *string `json:"GroupFilter,omitempty"`
	// LDAP attribute which denotes the group membership.
	GroupAttribute *string `json:"GroupAttribute,omitempty"`
}

// NewLDAPGroupSearchSettings instantiates a new LDAPGroupSearchSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLDAPGroupSearchSettings() *LDAPGroupSearchSettings {
	this := LDAPGroupSearchSettings{}
	return &this
}

// NewLDAPGroupSearchSettingsWithDefaults instantiates a new LDAPGroupSearchSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLDAPGroupSearchSettingsWithDefaults() *LDAPGroupSearchSettings {
	this := LDAPGroupSearchSettings{}
	return &this
}

// GetGroupBaseDN returns the GroupBaseDN field value if set, zero value otherwise.
func (o *LDAPGroupSearchSettings) GetGroupBaseDN() string {
	if o == nil || o.GroupBaseDN == nil {
		var ret string
		return ret
	}
	return *o.GroupBaseDN
}

// GetGroupBaseDNOk returns a tuple with the GroupBaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPGroupSearchSettings) GetGroupBaseDNOk() (*string, bool) {
	if o == nil || o.GroupBaseDN == nil {
		return nil, false
	}
	return o.GroupBaseDN, true
}

// HasGroupBaseDN returns a boolean if a field has been set.
func (o *LDAPGroupSearchSettings) HasGroupBaseDN() bool {
	if o != nil && o.GroupBaseDN != nil {
		return true
	}

	return false
}

// SetGroupBaseDN gets a reference to the given string and assigns it to the GroupBaseDN field.
func (o *LDAPGroupSearchSettings) SetGroupBaseDN(v string) {
	o.GroupBaseDN = &v
}

// GetGroupFilter returns the GroupFilter field value if set, zero value otherwise.
func (o *LDAPGroupSearchSettings) GetGroupFilter() string {
	if o == nil || o.GroupFilter == nil {
		var ret string
		return ret
	}
	return *o.GroupFilter
}

// GetGroupFilterOk returns a tuple with the GroupFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPGroupSearchSettings) GetGroupFilterOk() (*string, bool) {
	if o == nil || o.GroupFilter == nil {
		return nil, false
	}
	return o.GroupFilter, true
}

// HasGroupFilter returns a boolean if a field has been set.
func (o *LDAPGroupSearchSettings) HasGroupFilter() bool {
	if o != nil && o.GroupFilter != nil {
		return true
	}

	return false
}

// SetGroupFilter gets a reference to the given string and assigns it to the GroupFilter field.
func (o *LDAPGroupSearchSettings) SetGroupFilter(v string) {
	o.GroupFilter = &v
}

// GetGroupAttribute returns the GroupAttribute field value if set, zero value otherwise.
func (o *LDAPGroupSearchSettings) GetGroupAttribute() string {
	if o == nil || o.GroupAttribute == nil {
		var ret string
		return ret
	}
	return *o.GroupAttribute
}

// GetGroupAttributeOk returns a tuple with the GroupAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPGroupSearchSettings) GetGroupAttributeOk() (*string, bool) {
	if o == nil || o.GroupAttribute == nil {
		return nil, false
	}
	return o.GroupAttribute, true
}

// HasGroupAttribute returns a boolean if a field has been set.
func (o *LDAPGroupSearchSettings) HasGroupAttribute() bool {
	if o != nil && o.GroupAttribute != nil {
		return true
	}

	return false
}

// SetGroupAttribute gets a reference to the given string and assigns it to the GroupAttribute field.
func (o *LDAPGroupSearchSettings) SetGroupAttribute(v string) {
	o.GroupAttribute = &v
}

func (o LDAPGroupSearchSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupBaseDN != nil {
		toSerialize["GroupBaseDN"] = o.GroupBaseDN
	}
	if o.GroupFilter != nil {
		toSerialize["GroupFilter"] = o.GroupFilter
	}
	if o.GroupAttribute != nil {
		toSerialize["GroupAttribute"] = o.GroupAttribute
	}
	return json.Marshal(toSerialize)
}

type NullableLDAPGroupSearchSettings struct {
	value *LDAPGroupSearchSettings
	isSet bool
}

func (v NullableLDAPGroupSearchSettings) Get() *LDAPGroupSearchSettings {
	return v.value
}

func (v *NullableLDAPGroupSearchSettings) Set(val *LDAPGroupSearchSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableLDAPGroupSearchSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableLDAPGroupSearchSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLDAPGroupSearchSettings(val *LDAPGroupSearchSettings) *NullableLDAPGroupSearchSettings {
	return &NullableLDAPGroupSearchSettings{value: val, isSet: true}
}

func (v NullableLDAPGroupSearchSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLDAPGroupSearchSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


